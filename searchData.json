[{"title":"黑苹果macOS 10.14 Mojave安装","url":"/2019/04/14/黑苹果macOS 10.14 Mojave安装.html","content":"\n\n## 黑苹果macOS 10.14 Mojave安装\n\n本文[转载](https://post.smzdm.com/p/az597lqo/)。\n[VMware安装macOS教程](https://post.smzdm.com/p/ax08lz74/)\n\n现在黑苹果越来越简单，工具和驱动都在不断丰富，只要你认真读懂了这篇文章，机器是近三代常规硬件（N卡不行），一般都可以实现黑果，难度很小，全文很多关于Clover的设置选项及功能都是我自己研究、尝试得出的资料，全部看懂可以省下你一两年的折腾。\n\n## 黑苹果知识获取\n\n- [tonymacx86.com](http://www.tonymacx86.com/)：这是国外的一个黑苹果论坛，上面有几位非常厉害的Clover和相关Kexts维护者，不收费有详细教程，首推论坛！\n- [insanelyMac](http://www.insanelymac.com/)：国外一个比较早的一个黑苹果论坛，就是在上文中[osx86社区](http://www.osx86project.org/)衍生而来的论坛，人数也不少，但是我用的较少，了解不多，有时候下载的会到这边来。\n- [github](http://www.github.com/)：Github也是一个非常好的黑果资源搜索器，首先大部分的Kexts开发者都把库放到了这里，其次很多现成现成的EFI也在上边，在这里我发现了最佳黑苹果笔记本——XPS 9360顶配。\n- [远景论坛](http://bbs.pcbeta.com/)：算是国内最大的黑苹果论坛，最早我接触黑苹果的时候就是在威锋x86和远景，相对而言威锋x86很多资料都太老了，置顶的精华都是好几年前的，对现在根本没有帮助，所以国内论坛首选远景，国内比较知名的黑果开发者也在上面混，但是远景也有很多问题，首先貌似现在是不开放的状态，注册要邀请码，其次远景曾经有一年左右时间存在问题，域名解析或者[服务器](https://www.smzdm.com/fenlei/fuwuqi/)挂了，最最重要的是远景知识不成体系，很多时候大家都是做了个EFI分享出来完事儿，究竟怎么做的，重点在哪里，这个比较少，而且很多资源都是搬运国外的东西，个人建议你如果黑苹果水平还不错，闲来看看别人在玩啥可以，但别想着从这里学会东西。\n- 诸多个人论坛：这个需要个人收集，国内的有国光、黑果小兵，国外的nickwoodhams等等，先不用急着看，个人建议先从tonymacx86看起。\n\n## 前期准备\n\n\n\n### 配置环境\n\nmacOS 10.14.3 Mojave\n\n### 本机电脑配置\n\n处理器：intel i7 6400T\n主板：华擎Z170 OC Formula\n内存：海盗船DDR4 3000 C15 8G\n固态：[三星](https://pinpai.smzdm.com/257/)SM961 256G\n显卡：蓝宝石RX 570超白金\n\n### 准备工具\n\n1. Clover Configuration\n2. Clover v4658 or newer/newest Clover of RehabMan Build\n3. 8G+U盘一只\n4. 支持UEFI启动的目标电脑，CPU要求Ivy Bridge及更新的处理器，Sandy Bridge及更老处理器请自行研究\n\n\n\n## 关于硬件的兼容性问题\n\n在开始之前我要简单谈谈关于硬件的兼容性问题，\n一般来说本文只要是Ivy Bridge之后的CPU都没什么问题，如果是SandyBridge处理器，由于Mojave不支持Sandy Bridge平台安装，请在Clover Boot arguments中添加 `-no-compat_check` 来跳过Mojave的兼容性检查。\n固态方面：NVME固态包括但不限于建兴、海力士等部分型号和三星PM981，这些固态的主控macOS不认，所以安装根本找不到，SATA固态则没有这个问题。\n显卡方面：目前只推荐Intel核显和AMD RX460/470/480/560/570/580和Vega 56/64，需要注意2048sp的RX 580是不能用的。\n\n## 创建macOS Install USB Drive\n\n从这篇文章起，我们就真正的开始进入安装黑苹果的阶段，现在我们已经知道，一台Intel处理器的电脑安装黑苹果，实际上是由BIOS Legacy或者UEFI引导第三方EFI启动器，例如Clover，来实现启动macOS。目前最主流的方案是UEFI+Clover创建、安装、引导macOS Mojave，所以我们首先需要创建macOS Mojave的安装U盘。\n\n很多人不明白为什么我要在第一篇文章中使用U盘来安装虚拟机macOS Mojave，而不是使用vmdk硬盘镜像。事实上这种安装方法能节省我们创建U盘的时间，不需要再下载第二次macOS安装镜像文件。对于我们来说我们直接将U盘连接到虚拟机macOS中，然后在U盘的EFI分区中安装Clover即可。\n\n但是为了让手头有Macbook Pro等设备而没进行第一篇安装虚拟机操作的人也能创建黑苹果安装U盘，我将会讲解一次从空白的U盘到创建U盘镜像的完整过程，**已经按照第一篇文章使用U盘安装虚拟机的可以跳过这个步骤。进入下一段！**\n\n首先，我们下载最新版本的Mojave，这可以从App Store中下载\n\n\n\n![App Store下载Mojave](https://i.loli.net/2019/04/14/5cb30c7642f2d.png)App Store下载Mojave\n\n\n\n\n\n![勾选获取](https://i.loli.net/2019/04/14/5cb30c72af663.png)勾选获取\n\n\n\n弹出偏好中的系统更新，然而不知道为什么下载失败，不清楚是否由于虚拟机环境造成，实体机应该不会有这样的现象。\n\n\n\n![失败](https://i.loli.net/2019/04/14/5cb30c6d7bb6f.png)失败\n\n故我只能剑走偏锋，经过google搜索how to reinstall mojave，我发现了一个小软件名为macOS Mojave Patcher。通过Patcher内置的Tools可以下载Mojave。\n\n\n\n\n\n![macOS Mojave Patcher](https://i.loli.net/2019/04/14/5cb30c7486ec3.png)macOS Mojave Patcher\n\n\n\n\n\n确认后即可开始下载。\n\n\n\n**![Download macOS](https://i.loli.net/2019/04/14/5cb30c6f701a6.png)Download macOS**\n\n\n\n\n\n总体来说下载速度并不慢\n\n\n\n![下载过程](https://i.loli.net/2019/04/14/5cb30c6e65972.png)下载过程\n\n\n\n\n下载完毕后在/Application目录下就可以找到Install macOS Mojave的安装器。我们既可以使用macOS Mojave Patcher创建U盘，也可以用命令行创建，我两种方法都演示一遍：\n\n首先是macOS Mojave Patcher，点击左边的icon，跳出选择安装app，我们选择/Application/Install macOS Mojave，点击打开。\n\n\n\n\n\n![在软件中可以直接烧录](https://i.loli.net/2019/04/14/5cb30c7061d71.png)在软件中可以直接烧录\n\n\n\n\n\n\n\n**![选择Mojave安装文件](https://i.loli.net/2019/04/14/5cb30c716f29a.png)选择Mojave安装文件**\n\n\n\n\n接着再点击右侧的Target Disk，选择U盘为目标磁盘，接下来点击Start Operation就开始烧录了。\n\n![安装到对应磁盘](https://i.loli.net/2019/04/14/5cb30e2ee988f.png)安装到对应磁盘\n\n第二种方法是使用Terminal创建，需要对命令行有一定的熟悉。\n\n首先将U盘插入虚拟机或者MacBook Pro，打开macOS自带的Terminal终端，输入`diskutil list` ，输出如下图所示。\n\n\n\n![查看磁盘分区](https://i.loli.net/2019/04/14/5cb30e2a53c77.png)查看磁盘分区\n\n从图中可以看出，我的电脑有3个磁盘，disk0是真正的物理磁盘，分为两个分区，disk0s1是EFI引导分区，disk0s2则是APFS文件系统的容器，这个容器虚拟化成disk1，再在其中分为4个分区，分别为安装系统的Macintosh HD、不知道干什么用的Preboot、恢复使用的Recovery分区和最后描述APFS文件虚拟化的VM分区。而disk3则是我的U盘，所以现在我们已经知道了disk3是我们要操作的对象。\n\ndiskutil partitionDisk /dev/disk3 1 GPT HFS+J \"install_osx\" R\n\ndiskutil是磁盘管理命令，partitionDisk表示对目标磁盘进行格式化，/dev/disk3则是U盘对应的硬件名（因为在Unix下任何硬件都对应着一个文件），1表示除EFI分区外只留下一个分区，GPT意味着使用GUID分区图，HFS+J使用HFS分区文件系统，install_osx则是格式化后的分区名。输出结果如图所示：我们已经创建了一个200M+的EFI分区（苹果引导EFI区必须要大于200M）和一个15.7GB的分区。\n\n\n\n![划分U盘分区](https://i.loli.net/2019/04/14/5cb30e2c1d7c6.png)划分U盘分区\n\n接下来我们要使用命令创建安装U盘。输入以下命令：\n\nsudo /Applications/Install macOS Mojave.app/Contents/Resources/createinstallmedia --volume  /Volumes/install_osx --nointeraction\n\nsudo表示调用超级管理员权限，意味着等会儿执行命令需要输入账户密码，后面跟的/Applica->media则表示使用这个路径的命令，—volume后面的表示目标分区为U盘。执行命令后将会格式化U盘并COPY系统安装文件。\n\n\n\n![烧录完成](https://i.loli.net/2019/04/14/5cb30e29821f6.png)烧录完成\n\n\n\n# Create Clover EFI and Configuration\n\n接下来我们需要对U盘的EFI分区安装Clover，这里既可以使用sourceforge上托管的Clover master branch，也可以使用其他人fork的Clover分支，我比较习惯使用RehabMan在Bitbucket上fork的CloverRM版，诸位可自行下载。打开Clover，点击继续，确认许可协议\n\n\n\n![Clover-1](https://i.loli.net/2019/04/14/5cb30e2b48f5f.png)Clover-1\n\n\n\n\n\n![Clover-2](https://i.loli.net/2019/04/14/5cb30e2e027ea.png)Clover-2\n\n接下来我们选择更改安装位置，选择我们的U盘。\n\n\n\n![修改安装位置](https://i.loli.net/2019/04/14/5cb30e27da14d.png)修改安装位置\n\n\n\n\n\n![定位到U盘](https://i.loli.net/2019/04/14/5cb30e2d116ee.png)定位到U盘\n\n点击继续重新回到上级界面，这次我们选择自定。\n\n\n\n![选择自定安装](https://i.loli.net/2019/04/14/5cb30e28abc5b.png)选择自定安装\n\n自定的内容非常多，我们需要详细讲解一下\n\n\n\n![Clover自定安装](https://i.loli.net/2019/04/14/5cb30f250f25c.png)Clover自定安装\n\n由于我们使用UEFI启动而非BIOS Legacy，所以勾选仅安装UEFI开启版本，与此同时安装Clover到EFI系统区也会自动勾选，Bootloader和CloverEFI则无法选中（因为这两项是跟BIOS Legacy启动有关，如果想BIOS引导安装请自行研究），勾选开机主题，这样我们的启动界面能设置各式各样的主题更换。勾选UEFI开机版本后，BIOS Drivers和FileVault 2 BIOS Drivers也会自动隐藏。\n\n\n\n![配置主题](https://i.loli.net/2019/04/14/5cb30f260172a.png)配置主题\n\n接下来就是最最重要的UEFI Drivers配置，点击左侧的三角箭头展开如下图所示：\n\n\n\n![配置UEFI Drivers](https://i.loli.net/2019/04/14/5cb30f26df334.png)配置UEFI Drivers\n\n- ApfsDriverLoader-64 & AppleImageLoader-64这两个是用来替代macOS原生APFS.efi，在High Sierra之后的版本，苹果公司将磁盘分区从HFS更换为了APFS，早期Clover不带这两个efi，所以需要使用macOS中提取的apfs.efi来引导apfs磁盘，但是原生apfs会出现代码，为了好看和方便，现在的Clover已经自带了apfs引导efi了。这两个驱动必须勾选。\n- AptioMemoryFix-64是用于处理引导初始阶段的UEFI内存分配修正efi，同类efi还有OsxAptioFix3Drv-64.efi/OsxAptioFix2Drv-64.efi/OsxAptioFixDrv-64.efi/OsxLowMemFixDrv-64.efi，千万千万注意，一个Clover引导EFI中只能有一个MemFixDrv，不然会出现错误，如果说你使用AptioMemoryFix在初始分配内存时就出错，那么可以尝试考虑更换为后面几个（也要一个个替换，千万别一堆安装上去）。这个驱动也必须要勾选。\n- DataHubDxe-64是macOS要求强制启动的协议，虽然大部分情况下都是启动的，但是有备无患，而且这个efi不会引起崩溃，大家都勾选即可。\n- FSInject-64必须勾选，正常情况下，我们需要对黑苹果注入kernal kext，这个是必备efi。\n- SMCHelper-64是和FakeSMC联动的efi，smc是苹果为了限制非Apple设备安装macOS的东西，所以这个必须勾选。\n- CsmVideoDxe-64是在CSM开启情况下提供更多的分辨率的efi，由于我们是纯粹的UEFI启动，所以不装（这玩意儿装了可能会出错）。\n- EmuVariableUefi-64是对某些UEFI启动无法调用NVRAM的机器提供的NVRAM模拟，部分Skylake架构的机器会需要这个efi（真的是很小一部分，我装过Skylake三台机器，都没有用过这个efi），我建议只有在出错告知你需要这玩意儿的时候再调整，虽然这玩意儿装了好像也不会导致崩溃，但是我不确认本来NVRAM正常的机器装上这个会不会就不调用硬件NVRAM了。所以我这里也不勾选。\n- PartitionDxe-64主要用于处理macOS的Hybrid磁盘分区表，这个是Bootcamp中用到的，我们没啥用，不用勾选。\n\n剩下的都没什么好讲的，基本用不到，很多都是历史遗留，原来有用，现在已经被macOS原生支持了，不需要再添加。点击安装：需要输入密码。\n\n\n\n![安装Clover](https://i.loli.net/2019/04/14/5cb30f27cf55f.png)安装Clover\n\n安装完毕。\n\n\n\n![安装完毕](https://i.loli.net/2019/04/14/5cb30f242f391.png)安装完毕\n\n与此同时，在桌面上我们也可以看到EFI分区已经被挂载。\n\n![EFI分区出现](https://i.loli.net/2019/04/14/5cb30f29cb7e0.png)EFI分区出现\n\nClover文件结构如下图所示\n\n\n\n![Clover EFI文件结构](https://i.loli.net/2019/04/14/5cb30f28c2dac.png)Clover EFI文件结构\n\nBOOT[文件夹](https://www.smzdm.com/fenlei/wenjianjia/)下有BOOTX64.efi，UEFI首先引导这个文件，然后BOOTX64.efi再进一步引导CLOVER目录下的CLOVERX64.efi，进入CLOVER引导流程，接下来我们一一讲解各个文件夹作用：\n\n- ACPI文件夹主要用于保存CLOVER引导时按F4提取的电脑ACPI表，保存在origin子目录下，我们进一步修改需要替换的DSDT和SSDT则需要保存在ACPI/patched目录下，目前我们用不到\n- config.plist则是Clover引导最最重要的配置文件，默认安装Clover是空文件，我们需要尽量找已经配置好、配置相近的成品config.plist进行替换。\n- doc文件夹下都是一些描述介绍Clover的用途和用法文件，可以整个删除\n- drivers64文件夹下主要是BIOS Legacy引导时需要加载的driver，我们使用UEFI引导可以整个删除\n- drivers64UEFI文件夹是UEFI引导时需要加载的driver，我们在接下来还需要修改。\n- kexts文件夹下保存着需要注入macOS中的kernel kexts，非常重要，里面有10.6-10.14的子文件夹和other子文件夹，一般情况下，我们会删除10.6-10.14子文件夹 ，只保留other文件夹，所有的kext保存在other文件夹下。\n- misc文件夹是保存preboot文件和vbios文件，一般情况下用不到，可以整个删掉。\n- OEM文件夹也无用，可以整个删掉\n- themes保存着Clover主题文件，例如我们现在就保存了BGM和Metal主题\n- tools保存着efi shell，不做修改。\n\n总结一下，这里面目前最重要的就是config.plist/kexts/drivers64UEFI这三位，接下来我们就需要找到一个相近的config.plist文件来替换现有的config.plist，因为自己研究config.plist的写法太繁琐太困难，我们只要找到类似的config.plist进行小小的修改更加方便。这就是为什么很多人推荐如果打算进行黑苹果，最好能找已经有人配置成功的类似配置进行组装DIY，因为别人成功表示你也大概率可以，而且它的config.plist你可以借鉴甚至直接拿来用，省心省事儿，像我更愿意有一位大牛在前面帮我做好引导，我只需要简单拿来用就好。\n\nRehabMan的github上有OS-X-Clover-Laptop-Config库，诸位可以自行寻找相近配置进行替换，本机采用Intel io7 6400T处理器，内置HD 530核显，应该是比较容易驱动的，但是这次我用了一张RX570，故没核显什么事情，所以我选择了同为14nm架构的Skylake中选择config，最终选择了config_HD515_520_530_540.plist。复制到Clover文件夹中重命名为config.plist替换原有文件。\n\n接下来我们需要安装Clover Configuration来对EFI中的Clover进一步配置。Clover Configuration界面如图所示：\n\n\n\n![Clover Configuration](https://i.loli.net/2019/04/14/5cb30f2dc5cd5.png)Clover Configuration\n\n打开EFI分区中的config.plist，如图所示\n\n\n\n![ACPI](https://i.loli.net/2019/04/14/5cb30f2c698d6.png)ACPI\n\n在左侧标签栏中选择Boot，Boot Argument保留-v dart=0和debug=0x100，Timeout改为-1，其他随意，Timeout是关于Clover引导时的等待时间，-1表示一直等待除非你选择某个启动。\n\n![Boot](https://i.loli.net/2019/04/14/5cb30f2b10aff.png)Boot\n\n\n这里也要详细说明下Boot Argument，你可以理解为启动参数，不同的启动参数用于开启不同的功能，有些kext也需要启动参数进行配置，右键可以添加。\n\n\n\n![Argument](https://i.loli.net/2019/04/14/5cb30fe84c61f.png)Argument\n\n- -v是调试模式，在加上这个参数后macOS启动和关机将不会是苹果LOGO+进度条，取而代之则是引导时各种信息提示和BUG提示。在安装的时候推荐勾选。\n- -s是单用户模式，我也没用过\n- -x是安全模式，没用过\n- npci=0x2000/npci=0x3000是针对X99用户需要添加的参数，不然会卡PCI Configuration Begin\n- -xcpm是使用XNU CPU PowerManagement\n- cpus=1是强制只使用1个核心启动，避免由于CPU核心过多导致的引导错误\n- dart=0是禁用vt-d，macOS不支持vt-d，所以需要在BIOS中关闭，但是本人玩esxi喜欢开着，所以就需要添加dart=0\n- debug=0x100是在遇到panic时不要自动重启，这样我们能在调试状态下看到卡在哪个地方\n- nvda_drv=1是加载Nvidia Web Driver，N卡用户在安装完Web Driver后需要启用，但是目前Web Driver卡在macOS 10.13.6，Mojave没有Web Driver Release，很有可能会一直停滞，因为Apple希望发展自己的Metal替代CUDA，所以目前安装黑苹果推荐要么核显要么RX4xx/5xx/Vega xx（RX 580 2048sp不可用）\n- nv_disable=1在没有安装Web Driver之前，所有N卡用户必须要加上这条禁用macOS自带的Nvidia驱动。\n- kext-dev-mode=1是早期遗留，在Sierra之前需要这条命令起到sudo的作用。\n- rootless=0同上，也是历史遗留\n- 下面的Lilu/AppleALC/CPUFriend等等都是需要配合相应的kext才能起作用，建议去github自行查询相应的用处。\n\n在CPU选项卡中，如果是Skylake以上的处理器可以开启HWPEnable，勾选圈圈中的两个选项即可启动。\n\n\n\n![CPU](https://i.loli.net/2019/04/14/5cb30ff0bb872.png)CPU\n\nDisable Drivers选项卡中的设置则和之前的Driver64UEFI息息相关，如果在这里添加了某个Drivers，那么即使在前面那个文件夹中有efi，也不会被引导，RehabMan的配置文件中默认关闭VBoxHfs，因为太老了，性能较差，我们在接下来会下载HFSPlus-64替代。\n\n![Disable Drivers](https://i.loli.net/2019/04/14/5cb30fe959d91.png)Disable Drivers\n\n\nGUI选项卡一般不需要做大改动，如果要引导Linux，请勾选Scan下的Linux，在右侧可以配置主题，例如我们这里选择BGM作为主题，最右边还可以隐藏Volume，一般情况下我们隐藏Preboot和Recovery。\n\n\n\n![GUI](https://i.loli.net/2019/04/14/5cb30fece5a34.png)GUI\n\n在Graphics中我们可以对显卡进行ID注入，Intel核显用户请输入正确ig-platform-id并勾选inject Intel，具体ig-platform-id可以参考黑果小兵整理的Intel核显platform-id，由于我们是AMD RX 570 4G，除了要在kext包中添加WhateverGreen之外，还需要勾选RedeonDeInit，具体原因参照Tonymacx86-Post Install-Graphics-Radeon Compatibilty Guide As Follow:\n\n> Many modern AMD GPUs are incorrectly initialized during boot phase, which will can lead to serious issues in OS X (e.g. boot to black screen or crash after sleep/wake). This was first solved by the WhateverGreen Lilu plugin. Extensive research has been done by Mieze, resulting in a DSDT patch. This knowledge has been incorporated into Clover (starting with rev. 4296) and can be enabled from the config.plist\n\nInject ATI和Inject NVidia一般都不用勾选，这是对老显卡的支持。\n\n\n\n![Graphics](https://i.loli.net/2019/04/14/5cb30fea86c87.png)Graphics\n\nKernel and Kext Patches则是一些高手们定制出来的补丁，通过这种方式进行热修复，这里要说下比较关键的MSR 0xE2问题，在真实的Mac电脑上，OSX XCPM PowerManagement需要对BIOS中MSR 0xE2这块区域进行读写，然而，很多主板把这个区域锁了起来，不允许读取修改，ASUS主板印象中是全线都锁，所以这就导致了Kernel Panic，根本无法引导，以前很多人说技嘉的主板容易黑，那就是因为技嘉几乎全线都是Unlock的，所以我们经常会说到BIOS中的CFG Lock需要Disable。但很多主板BIOS中根本没有这个选项，\n\n第一种方法是CodeRush开发的UEFIPatch可以让我们解锁MSR 0xE2选项，但是相对比较麻烦\n第二种方法我们可以在KernelToPatch中添加由Pike R.Alpha的“xcpm_core_scope_msrs”补丁，并且勾选kernelPM，补丁如下：\n\nFind: 31 d2 e8 91 fc ff ff Replace: 31 d2 90 90 90 90 90\n\n![Kernel and Kexts to Patch](https://i.loli.net/2019/04/14/5cb3113c8a3e2.png)Kernel and Kexts to Patch\n\nSMBIOS代表你这个机器的型号，点击圈圈内的按钮可以选择不同的机型，尽量选择同代CPU机型仿冒，这里我选择同为Skylake架构的iMac 17,1。\n\n\n\n![SMBIOS](https://i.loli.net/2019/04/14/5cb30fee2d09d.png)SMBIOS\n\n回到Rt Variables，我们点击Generate创建ROM\n\n\n\n![RT Variable](https://i.loli.net/2019/04/14/5cb30fef6f4a2.png)RT Variable\n\n最后在System Parameters中我们Generate UUID，在inject Kexts中选择Detect，这里Detect表示如果在/System/Library/Extensions或者/Library/Extensions文件夹中有同样的kext，clover就不会注入，如果没有，就会注入，个人觉得最好，而Yes表示无论如何都注入，No表示不注入kext。\n\n\n\n![System Parameters](https://i.loli.net/2019/04/14/5cb30ff33f9cf.png)System Parameters\n\nClover Configuration的左下侧则是一些小工具，例如Mount EFI可以非常方便的挂载系统和U盘的EFI分区\n\n\n\n![Mount EFI](https://i.loli.net/2019/04/14/5cb30ff1e6a55.png)Mount EFI\n\nInstall Drivers则可以非常方便下载EFI Drivers，我们这里就需要使用这个工具下载HFSPlus-64.efi，否则在Clover中我们根本看不到Install Mojave。\n\n\n\n![Install Drivers](https://i.loli.net/2019/04/14/5cb30febb7b84.png)Install Drivers\n\nkexts Installer中我们可以非常方便的下载一些必要的Kexts，需要注意，OS Version要选择Other，这样所有的kext都会被下载到Kexts/Other文件夹下。我们这里需要Lilu/WhateverGreen/FakeSMC/USBInjectAll：\n\n\n\n![Kexts Installer](https://i.loli.net/2019/04/14/5cb311ee6c7a8.png)Kexts Installer\n\n简单的说一下这些Kext各自的作用，为了大家能理解作用，请详细阅读下段文字，挑选自己需要的kext！\n\n- Lilu是一个由acidanthera写的辅助性Kext，它本身没有什么作用，但是它能帮助其它kext注入，并且提供了一套独特的API，所以很多Kext需要它的存在才能发挥作用，依赖它的Kext有：AirportBrcmFixup/AppleALC/ATH9KFixup/BT4LEContiunityFixup/CPUFriend/DiskArbitrationFixup/HibernationFixup/NightShiftUnlocker/NoTouchID/NoVPAJpeg/VirtualSMC/WahteverGreen，所以这个驱动几乎是必备的。\n- VirtualSMC是用来取代FakeSMC的新一代kext，也是由acidanthera写的，但是目前BUG较多，我基本是不用的\n- WhateverGreen可以说是GPU kext的集大成制作，集合了CoreDisplayFixup/BrcmWLFixup/EnableLidWake/AppleBlacklightFixup/AzulPatcher4600/IntelGraphicsDVMTFixup/IntelGraphicsFixup/NvidiaGraphicsFixup/Shiki等kext，基本能解决除N卡Web Driver没有外所有的显卡问题。也是由acidanthera编写，必备驱动。如果你使用的是4K屏幕，请在Boot Argument中加入-cdfon。\n- AppleALC同样由acidanthera编写，主要是为了对那些不支持的声卡进行修复，让其正常工作，之后的文章我们会对其深入讲解。\n- AirportBrcmFixup则是针对无线网卡的驱动和Airport功能的修复。\n- NoVPAJpeg是针对macOS 10.14下Preview和QuickLook存在问题而添加的。\n- CPUFriend是开启动态CPU电源管理时需要用到\n- FakeSMC是最最最最最最最重要的Kext，没有之一，RehabMan出品。因为macOS的安装需要SMC，这个kext的作用就是模拟SMC，让macOS安装可以正常进行，这个必须要有！此外FakeSMC还有一系列插件 （FakeSMC_ACPISensors.kext, FakeSMC_CPUSensors.kext, FakeSMC_LPCSensors.kext, FakeSMC_GPUSensors.kext），如果你要使用HWMonitor监测CPU数据，就需要安装这些插件。\n- USBInjectAll是针对macOS有USB Port数量限制而设计出来的，RehabMan出品。在macOS10.11之后，USB特别多的主板，例如Z系列X系列要么破解USB Port Limit要么针对本机定制USBInjectAll，之后的文章我们会深入讲解。\n- VoodooPS2Controlller：如果你是笔记本，请加入这个驱动，这个主要是为了提供PS2支持，因为[台式机](https://www.smzdm.com/fenlei/taishiji/)很少用到PS2，所以可以不加，但是笔记本的键盘、[触控板](https://www.smzdm.com/fenlei/chukongban/)大多数都是使用PS2端口，所以一定要加。\n- NullCPUPowerManagement：如果你卡在了ApplePowerManagement说明CPU原生电源管理失败，就需要这个驱动来关闭CPU原生电源管理。\n- ACPIBatteryManagement：笔记本电池管理需要用到，但是安装的时候不加没关系，之后的文章详细讲解笔记本电池ACPI修复的时候会讲解。\n- FakePCIID：仿冒PCI设备的一些Kext依赖它，属于辅助性kext。驱动无线网卡的时候要用到，RehabMan出品。\n- GenericUSBXHCI：其实我本不想描述这个Kext，因为这个Kext是针对Sandy Bridge架构及更早的处理器不支持USB3.0，所以主板自作聪明添加了第三方USB3，这时候就需要这个驱动来实现正常工作，对我们没啥用处。\n- RealtekRTL8111/RealtekRTL8100/AppleIntelE1000e/IntelMausiEthernet/AtherosE2200Ethernet这些则是有线网卡驱动，可以根据自己的网卡型号挑选，无线网卡和蓝牙部分我们下次详细展开讲。\n\n这块主板是Intel i219-V的网卡，所以还需要额外安装IntelMausiEthernet。这些都可以在tonymacx86上下载到。最终Kext文件夹如图所示，只要能安装就好，完善之后再做。\n\n\n\n![驱动目录](https://i.loli.net/2019/04/14/5cb311ed37f85.png)驱动目录\n\nIntel核显用户特别注意，Broadwell和Skylake处理器在macOS下都要求DVMT-Prealloc最起码在64M及以上，但是很多BIOS都不支持更改，所以config中一般默认添加了一个minStolenSize的patch，将macOS的要求从64M改为32M，它在config.plist/Devices/Properties/PciRoot(0)/Pci(0x02,0)中存在。\n\n\n\n![image.png](https://i.loli.net/2019/04/14/5cb311efa7dbe.png)image.png\n\n\n\n## 设置BIOS\n\n- 关闭vt-d：但是由于本人讨厌关闭vt-d，所以在Boot Argument中已经添加dart=0，可以不关闭。\n\n- 关闭secure boot：微软整出来的幺蛾子，要求启动的系统有签证才算secure，妥妥的要关掉。\n\n- 关闭Legacy Boot/CSM：为了纯正的UEFI引导，我们要关闭避免干扰，如果你Windows不是UEFI启动，那也可以不关，但是请仔细选择引导（如果UEFI启动进入Clover卡住，请开启CSM，如果单屏正常，双屏启动黑屏，请开启CSM）。\n\n- 关闭fast boot：有些主板Fast Boot会直接忽略USB引导。\n\n- SATA Mode设置为AHCI，不要IDE，不要RAID\n\n- 关闭TPM模块\n\n- 关闭CFG-Lock，我真想不明白为什么主板厂喜欢Lock，默认Lock就算了，还不给改。\n\n- 关闭IO Serial Port：这个就是所谓的COM口，一般正常人也用不到，有些搞硬件开发和单片机的用的比较多\n\n- 开启XHCI Handoff EHCI Handoff\n\n  # 启动macOS Mojave安装U盘\n\n  开机按F11（因主板而异）进入启动选择菜单，选择Mojave安装U盘，前面都已经配置好了，这里直接回车，等待即可。虽然是这台电脑我根本没装过，但是根据我对常规平台的了解和前面详细的设置，个人觉得一次就能过。\n\n果不其然，正常进入安装界面：\n\n\n\n![第一次启动1](https://i.loli.net/2019/04/14/5cb311f3cb5c7.jpeg)第一次启动1\n\n接下来首先选择语言为简体中文，下一步。\n\n![第一次启动2](https://i.loli.net/2019/04/14/5cb3156bde647.jpeg)第一次启动2\n\n在macOS实用工具这里首先选择磁盘工具，进行进一步的配置。\n\n\n\n![第一次启动3](https://i.loli.net/2019/04/14/5cb3156730d4e.jpeg)第一次启动3\n\n在磁盘工具里我们可以发现除了Windows下的两块SATA硬盘被标注为disk1s1（[机械硬盘](https://www.smzdm.com/fenlei/putongyingpan/)，disk1表示第一块硬盘，因为在插主板SATA口的时候更靠前，s1表示第二个分区，第一个分区为GPT格式默认有的EFI分区）和disk2s4（Windows所在磁盘分区）之外，还有一个SAMSUNG开头的大小为256G的PCI-E磁盘，这就是我们要安装的地方，选择最上方抹掉按钮。\n\n![第一次启动4](https://i.loli.net/2019/04/14/5cb31570d062a.jpeg)第一次启动4\n\n名称为Macintosh HD，macOS默认的名称，格式为APFS+GUID分区表。\n\n\n\n![第一次启动5](https://i.loli.net/2019/04/14/5cb3156f2635b.jpeg)第一次启动5\n\n格式化成功后关闭磁盘工具\n\n![第一次启动6](https://i.loli.net/2019/04/14/5cb31572b0820.jpeg)第一次启动6\n\n选择安装macOS。\n\n\n\n![第一次启动7](https://i.loli.net/2019/04/14/5cb3156a2f28a.jpeg)第一次启动7\n\n选择继续\n\n\n\n![第一次启动8](https://i.loli.net/2019/04/14/5cb31568bb5a8.jpeg)第一次启动8\n\n协议继续下一步\n\n\n\n![第一次启动9](https://i.loli.net/2019/04/14/5cb3156d771dd.jpeg)第一次启动9\n\n目标磁盘选择刚才格式化好的Macintosh HD分区\n\n![第一次启动10](https://i.loli.net/2019/04/14/5cb3161a3066b.jpeg)第一次启动10\n\n接下来进入漫长的等待\n\n\n\n![第一次启动11](https://i.loli.net/2019/04/14/5cb31616b88e8.jpeg)第一次启动11\n\n结束后会重启电脑，仍然按F11选择U盘EFI启动（因为这个时候我们只有U盘里有Clover Bootloader可以引导macOS），选择右下角是磁盘形状的macOS图标，并且名称应该为Install from Macintosh HD。这次引导会相对快一些，引导结束一会儿就会重启\n\n\n\n![第二次启动](https://i.loli.net/2019/04/14/5cb3160f14ebb.jpeg)第二次启动\n\n第二次重启后，就会开始将复制到Macintosh HD磁盘的系统文件解压展开并进行一系列的自动化设置。结束后仍然是重启。\n\n\n\n![第三次启动](https://i.loli.net/2019/04/14/5cb316185a547.jpeg)第三次启动\n\n这次重启后进入U盘引导，我们可以发现磁盘变成了四个，第一个就是Windows，第二个是U盘的macOS安装环境，第三个是macOS系统，第四个则是Recovery分区。我们选择第三个回车：\n\n等待一段时间后我们就进入了macOS的设置界面，区域选择中国\n\n![第四次启动1](https://i.loli.net/2019/04/14/5cb316109725a.jpeg)第四次启动1\n\n\n键盘选择ABC英文键盘或者简体中文都行。\n\n\n\n![第四次启动2](https://i.loli.net/2019/04/14/5cb316139403d.jpeg)第四次启动2\n\n由于我实际上加入了WIFI驱动，所以是可以上网的\n\n![第四次启动3](https://i.loli.net/2019/04/14/5cb31612117cb.jpeg)第四次启动3\n\n如果是没有加入WIFI驱动并且没有网线连接有线网口是，出现的画面应该是这样的，我们需要选择“我的电脑不连接互联网”\n\n\n\n![第四次启动4](https://i.loli.net/2019/04/14/5cb3161bd7cee.jpeg)第四次启动4\n\n数据与隐私没啥好说的，继续\n\n\n\n![第四次启动5](https://i.loli.net/2019/04/14/5cb3161db7684.jpeg)第四次启动5\n\n不传输任何信息，继续\n\n\n\n![第四次启动6](https://i.loli.net/2019/04/14/5cb316f7c6ca3.jpeg)第四次启动6\n\n在登录Apple ID界面，个人建议无论你是否能上网，都选择稍后设置，因为很多朋友连SMBIOS的三码都没搞懂，贸然登录Apple ID是可能被锁账户的，到时候你哭都来不及。\n\n\n\n![第四次启动7](https://i.loli.net/2019/04/14/5cb316f48cf97.jpeg)第四次启动7\n\n条款与条件没啥好说的，继续\n\n\n\n![第四次启动8](https://i.loli.net/2019/04/14/5cb316f980404.jpeg)第四次启动8\n\n接下来创建本地账户，各位可自行设置\n\n\n\n![第四次启动9](https://i.loli.net/2019/04/14/5cb316f6327e0.jpeg)第四次启动9\n\n快捷设置选择自定设置\n\n\n\n![第四次启动10](https://i.loli.net/2019/04/14/5cb316f307d0f.jpeg)第四次启动10\n\n我们需要打开定位服务\n\n![第四次启动11](https://i.loli.net/2019/04/14/5cb316ee08915.jpeg)第四次启动11\n\n关闭数据共享\n\n\n\n![第四次启动12](https://i.loli.net/2019/04/14/5cb316f157858.jpeg)第四次启动12\n\n都上Mojave了，当然要选择更好看的Dark外观了。\n\n\n\n![第四次启动13](https://i.loli.net/2019/04/14/5cb316ec70565.jpeg)第四次启动13\n\n安装结束，一个完整的macOS系统就装完了。\n\n至此，我们就获得了一个运行于非Apple硬件上macOS 10.14 Mojave系统，当然它还有很多地方没有完善，关于驱动完善部分，我们将会在接下来的文章中继续介绍，敬请期待。![在Intel电脑上安装macOS 10.14 Mojave](https://res.smzdm.com/images/emotions/36.png) （最近连折腾电脑带黑果，累坏了）\n\n千万别把U盘扔了，下次我们进去macOS还得靠它呢。\n\n## 有关Windows macOS双系统时间不同步问题\n\n任何安装在计算机上的系统，其时间都是储存于BIOS中，Windows 10会把BIOS的时间当成本地时间，例如，现在东八区晚上八点，那么在BIOS中储存的也是8:00pm，但是Linux和macOS则会把BIOS中的时间当成UTC时间，即零时区的时间，故macOS在读到BIOS中为8:00pm，就会根据你所在的地点，例如中国，加上八个小时，所以如果macOS下没有进行时间同步，你看到的时间将会是4:00am。\n\n解决方法有两个：\n\n1. 在Windows下打开cmd，输入 `Reg add HKLMSYSTEMCurrentControlSetControlTimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1` ，Windows就会跟Linux和macOS一样，把BIOS时间作为UTC时间，个人比较喜欢这种，这样在装三系统的时候就只要修改一个系统的设置即可。\n2. 在macOS下安装一个叫Localtime-Toggle的补丁，可以让macOS将BIOS时间当做本地时间。","tags":["笔记","转载","黑苹果"],"categories":["技术向"]},{"title":"基于Travis的Hexo自动部署","url":"/2019/03/19/基于Travis的Hexo自动部署.html","content":"\nHexo迁移博客太麻烦了，我懒~哈哈~此文[转载](https://kchen.cc/2016/11/12/hexo-instructions/#Travis-%E5%92%8C-Hexo)记下防忘记。（PS:最好在mac上处理，windows各种坑... ...）\n\n<!--more-->\n\n## 注册Travis\n\n上[官网](https://travis-ci.org/)会发现有 Sign in with GitHub（使用GitHUb登录）和 Sign Up（注册），其实这俩做的事情都一样，就是用 GitHub 账号登录。登录后界面会显示你的 GitHub Repository，默认全部全部没有勾选，选择你的博客的 Repository 后完成第一步，如图\n\n![](https://ws1.sinaimg.cn/large/0069qIgcgy1g188ep1vvkj30qo0dwq4s.jpg)\n\n如果你没有看到自己的项目，请点击右上角的 Sync with Github。\n\n##  安装 Travis CML\n\n在进行下面的步骤之前，我们需要先安装 Travis 的 CML，因为后面的部署需要我们加密的自己的 SSH 私钥和 Github、Coding.net 通信。安装过程请看 [Travis CML Installation](https://github.com/travis-ci/travis.rb#installation)：\n\n首先必须有 [Ruby](http://www.ruby-lang.org/en/downloads/) 1.9.3 以上，检查了版本之后，安装 Travis，检查版本即可：\n\n```\nruby -v\ngem install travis -v 1.8.4 --no-rdoc --no-ri\ntravis version\n```\n\n如上，如果出现 1.8.2 这样的版本信息，则说明 Travis CI Command Line Client 安装成功。之后进行登录，执行：\n\n```\ntravis login\n```\n\n按照提示登录就好了。\n\n## 配置 Travis\n\n在博客根目录下添加 Travis CI 所需要的配置文件 `.travis.yml`，配置文件内容和一些说明如下：\n\n```\nlanguage: node_js\nnode_js: stable\n\n# assign build branches\nbranches:\n  only:\n    - blog-source\n\n# cache this directory\ncache:\n  directories:\n    - node_modules\n\n# S: Build Lifecycle\nbefore_install:\n  - openssl aes-256-cbc -K $encrypted_a0b7f0848317_key -iv $encrypted_a0b7f0848317_iv -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n  - chmod 600 ~/.ssh/id_rsa\n  - eval $(ssh-agent)\n  - ssh-add ~/.ssh/id_rsa\n  - cp .travis/ssh_config ~/.ssh/config\n  - npm install -g hexo-cli # 安装 hexo\n  - git clone -b mod https://github.com/quentin-chen/hexo-theme-even.git themes/even\n\ninstall:\n  - npm install # 安装 package.json 中的插件\n\nscript:\n  - hexo generate\n\nafter_success:\n  - git config --global user.name \"Quentin_Chen\"\n  - git config --global user.email \"quentin.chen@foxmail.com\"\n  - sed -i'' \"/^ *repo/s~github\\.com~${githubToken}@github.com~\" _config.yml\n  - hexo deploy\n# E: Build LifeCycle\n```\n\n我逐步来讲解一下每一个配置项的意思。\n\n```\nlanguage: node_js\nnode_js: stable\n\n# assign build branches\nbranches:\n  only:\n    - blog-source\n\n# cache this directory\ncache:\n  directories:\n    - node_modules\n```\n\n这里指定了构建的环境是 Node.js，版本是当前稳定版本。设置的 WebHook 钩子只检测 `blog-source` 分支的 `push` 变动。另外我们把 `node_modules` 文件夹放入缓存，这样可以大大节约每次构建的时间（2min -> 30s）。\n\n```\nbefore_install:\n  - openssl aes-256-cbc -K <you_key> -iv <your_iv> -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n  - chmod 600 ~/.ssh/id_rsa\n  - eval $(ssh-agent)\n  - ssh-add ~/.ssh/id_rsa\n  - cp .travis/ssh_config ~/.ssh/config\n  - npm install -g hexo-cli # 安装 hexo\n  - git clone <theme_repo> themes/<theme>\n```\n\n其实每次 Travis 构建的时候，相当于创建了一个干净的虚拟机，除了 Git 等必须的工具，甚至连 Node.js 的环境都是现安装的。所以我们在构建自己的博客之前，需要做一些环境的准备。\n\n其中 2-6 行是用来配置 SSH 私钥的，这样才能让 Github 和 Coding.net 知道你的身份。这一部分我们后面再说。\n\n第 7 行是在 Travis 中安装 Hexo 环境，第 8 行是安装主题。\n\n> 关于主题这里，如果你对自己的主题做了修改（包括配置文件），那么应该把自己修改过的主题托管到 Github，这里填的 `<theme_repo>` 应是你自己地址。\n\n```\ninstall:\n  - npm install # 安装 package.json 中的插件\n\nscript:\n  - hexo generate\n\nafter_success:\n  - git config --global user.name \"<You Name>\"\n  - git config --global user.email \"<email>\"\n  - hexo deploy\n```\n\n这一部分，就是在 Travis 上模拟部署过程。因为要使用 Git，所以要提前配置好 Committer 的信息。\n\n#### 生成私钥加密文件\n\n> 什么是私钥？\n\n私钥就是密钥对（密钥对指一对公钥和私钥），我们在使用 Github 的时候，首先需要在 Github 上配置公钥，这是最基础的。那么，存在我们本地的私钥就是你的个人身份标示，如果你的项目 git 地址配置的是 [git@github.com](mailto:git@github.com):username/projectname.git（相对的还有 [https://github.com/username/projectname.git），](https://github.com/username/projectname.git%EF%BC%89%EF%BC%8C) 当你在对 Repository 在一些操作（比如 `push` 等），则需要私钥进行身份验证了（这是自动验证的，如果是使用 https 的配置，则需要提供用户名和密码）。\n\n我们在 Travis CI 上自动部署代码，就牵扯到了 `push` 操作，那么就需要提供私钥了。\n\n> 为什么生成私钥加密文件？\n\n将私钥直接放在项目里，那么人人都能看到。私钥的泄露将会发生一系列的问题，比如有坏人拿你的私钥直接操作你的 git 项目，你能干啥他也能干啥（原理上面讲了），这咋整？我们需要对私钥进行加密。\n\nTravis 提供了加密文件的支持，什么意思呢？我们可以对文件（这里指私钥）在本地进行加密，然后把加密过后的文件放在项目里，那么别人就无法获取里面的真实内容。然后我们在让 Travis 执行脚本的时候，在读取加密文件之前对文件进行解密（使用的解密密码提前在 Travis 上配置好了），这样就可以达到不将文件内容暴露，并且让 Travis 获取到真实内容的目的了，大概的时序图如下：\n\n![](https://ws1.sinaimg.cn/large/0069qIgcgy1g188kvbtcaj30qo0kmdi6.jpg)\n\n开始吧，我们首先把自己的在博客的根目录下建立 `.travis` 文件夹来存放相关的资料：\n\n```\nmkdir .travis && cd .travis\n```\n\n把本地的私钥复制一份过来，用 Travis 加密，然后删除（**切记加密完了一定要删除原始密钥！！！**）：\n\n```\ncp ~/.ssh/id_rsa .\ntravis encrypt-file id_rsa\nrm id_rsa\n```\n\n现在 `ls` 命令查看一下 `.travis` 目录应该只有 `id_rsa.enc` 这一个文件才对。然后我们再在当前目录下新建一个 `ssh_config` 用来配置 Travis 上的 SSH Client。\n\n```\nHost *\n  User git\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa\n  IdentitiesOnly yes\n```\n\n现在，我们在 Travis 网站，博客项目的设置（项目右上角）里可以看到两个用于解密私钥的环境变量：\n\n![](https://ws1.sinaimg.cn/large/0069qIgcgy1g188ltumjfj30qo0lktc2.jpg)\n\n把这两个环境变量名复制到上面的 `.travis.yaml` 文件里替换相应部分：\n\n```\nbefore_install:\n  - openssl aes-256-cbc -K <you_key> -iv <your_iv> -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n```\n\n这样，全部的配置就完成了。\n\n## 完成工作流\n\n在进行工作流之前我们来检查一下我们现在工作目录和所有必须的东西：\n\n```\n.\n├── .travis*\n│   ├── id_rsa.enc\n│   └── ssh_config\n├── _config.yml*\n├── db.json*\n├── node_modules\n├── package.json*\n├── scaffolds*\n├── source*\n│   ├── CNAME*\n│   ├── _posts\n│   ├── about\n│   ├── categories\n│   ├── img\n│   ├── media\n│   └── tags\n└── themes\n```\n\n我用星号标记的文件和文件夹都是十分重要的，确保 Git 覆盖了这些文件和目录，然后我们把目录 `push` 到 `github/blog-source` 仓库分支。Travis WebHook 立马就会检测到 `push`，然后开始构建了：\n\n![](https://ws1.sinaimg.cn/large/0069qIgcgy1g188npaz7tj30qo0f00vd.jpg)\n\n","tags":["笔记","Hexo","Travis","转载"],"categories":["技术向"]},{"title":"Mac升级Nodejs和Npm","url":"/2017/10/28/Mac升级Nodejs和Npm.html","content":"\n刚黑完苹果，记笔记～\n<!--more-->\n\n### 1.清除node.js的cache\n\n```\n$ sudo npm cache clean -f\n```\n\n### 2.安装 n 工具\n\n这个工具是专门用来管理node.js版本\n\n```\n$ sudo npm install -g n\n```\n\n### 3.安装最新版本的node.js\n\n```\n$ sudo n stable\n```\n\n### 4.查看node.js版本\n\n```\n$ node -v\n```\n\n### 5.更新npm到最新版\n\n```\n$ sodu npm install npm@latest -g\n```\n","tags":["笔记","Mac"],"categories":["技术向"]},{"title":"Hexo添加Gitalk","url":"/2017/10/28/Hexo添加Gitalk.html","content":"\n特殊时段，好多“红杏“类软件都扑街了，而且disqus在国内的加载速度那个惨啊，搞个Gitalk试试喽～\n<!--more-->\n\n## 1.安装\n\n[Gitalk](https://github.com/gitalk/gitalk)提供了两种方式：\n\n1. 直接引入\n\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n  \n<script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n```\n\n2. npm安装\n\n```\nnpm i --save gitalk\n\nimport 'gitalk/dist/gitalk.css'\n\nimport Gitalk from 'gitalk'\n```\n\n鉴于我懒的程度直接选择第一种了TAT。\n\n## 2.使用\n\n### 新建仓库\n\n1. Github上新建一个仓库，命名随便只要记得住，这里就不赘述了,详细操作查看[Hexo博客搭建](https://www.wangyiting.win/2017/05/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html)。\n\n2. 创建`OAuth Application`，没有的小伙伴[请戳我](https://github.com/settings/applications/new)。 \n\n完成后会生成相应的`clientID`and`clientSecret`。\n\n\n### 修改主题文件\n\n1. 这里以next主题为例，不同的主题目录和模板引擎不同，可以自己修改哈,修改next主题配置文件`_config.yml`，于`dikqus`上方，添加字段：\n\n```\n# Gitalk\ngitalk: \n  enable: true    #用来做启用判断可以不用\n  clientID: 'your clientID'    #上面生成的往这里怼\n  clientSecret: 'your clientSecret'   #同上\n  repo: Blog_comments    #仓库名称\n  owner: erbiduo    #github用户名\n  admin: erbiduo\n  distractionFreeMode: true\n```\n\n2. 找到`next/layout/_third-party/comments`文件夹，新建`gitalk.swig`文件，代码如下：\n\n```\n{% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname %}\n  \n  {% if theme.gitalk.enable %}  //_config.yml文件若没有添加enable: true可删除该判断\n\n    {% if theme.gitalk.distractionFreeMode  %}      \n      <link rel='stylesheet' href=\"https://yiyeti.cc/usr/themes/veryse/css/gitalk.css\">\n      <script src=\"https://yiyeti.cc/usr/themes/veryse/css/gitalk.min.js\"></script>\n      <script type=\"text/javascript\">\n          var gitalk = new Gitalk({\n            clientID:  '{{theme.gitalk.clientID}}', \n            clientSecret: '{{theme.gitalk.clientSecret}}',\n            id: window.location.pathname,\n            repo: '{{theme.gitalk.repo}}', \n            owner: '{{theme.gitalk.owner}}', \n            admin: '{{theme.gitalk.admin}}', \n            distractionFreeMode: '{{theme.gitalk.distractionFreeMode}}',\n          })\n          gitalk.render('gitalk-container')\n      </script>\n    {% endif %}\n\n  {% endif %}\n{% endif %}\n```\n\n3. 同目录下在`index.swig`文件末尾添加：\n\n```\n{% include 'gitalk.swig' %}\n```\n\n4. 下步搞起，`next/layout/_partials`文件夹下，找到`comments.swig`文件，添加代码：\n\n```\n{% elseif theme.gitalk.distractionFreeMode %}  \n  <div id=\"gitalk-container\"></div>\n{% endif %}\n```\n\n哦了，不过Gitalk在移动端属于隐形状态。","tags":["Hexo"],"categories":["技术向"]},{"title":"Hexo自动备份及自启编辑器","url":"/2017/10/15/Hexo博客自动备份&自启编辑器.html","content":"\n偷懒使人明智，Hexo博客自动备份方案~\n<!--more-->\n\n#### 安装`shelljs`模块\n\n```\n$ npm install --save shelljs \n```\n\n#### 编写自动备份脚本\n\n模块安装完成之后，在Hexo根目录下`scripts`文件夹下（*没有就新建*），新建`backup.js`文件。\n写入以下内容：\n\n```\nrequire('shelljs/global');\ntry {\n\thexo.on('deployAfter', function() {//当deploy完成后执行备份\n\t\trun();\n\t});\n} catch (e) {\n\tconsole.log(\"产生了一个错误<(￣3￣)> !，错误详情为：\" + e.toString());\n}\nfunction run() {\n\tif (!which('git')) {\n\t\techo('Sorry, this script requires git');\n\t\texit(1);\n\t} else {\n\t\techo(\"======================Auto Backup Begin===========================\");\n\t\tcd('H:\\My_project\\myBlog');  //此处修改为Hexo根目录路径\n\t\tif (exec('git add --all').code !== 0) {\n\t\t\techo('Error: Git add failed');\n\t\t\texit(1);\n\t\t}\n\t\tif (exec('git commit -am \"Form auto backup script\\'s commit\"').code !== 0) {\n\t\t\techo('Error: Git commit failed');\n\t\t\texit(1);\n\t\t}\n\t\tif (exec('git push origin master').code !== 0) {  //此处修改为自己的远程仓库名和分支名\n\t\t\techo('Error: Git push failed');\n\t\t\texit(1);\n\t\t}\n\t\techo(\"==================Auto Backup Complete============================\")\n\t}\n}\n```\n\n保存后，执行`hexo deploy`命令，发布的同时就会进行备份了。\n\n#### 编写自动开启编辑器脚本\n\n在Hexo根目录下`scripts`文件夹下，新建`sublime.js`（*可自定义*）文件。\n如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar spawn = require('child_process').exec;\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n  exec('start  \"markdown编辑器绝对路径.exe\" ' + path);\n});\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n  exec('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar exec = require('child_process').exec;\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n});\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\nKO!","tags":["Hexo","博客"],"categories":["技术向"]},{"title":"Git常用命令笔记","url":"/2017/10/15/Git常用命令笔记.html","content":"\n由于各种原因，好久没有用，都忘的七七八八了，基础教程查看归纳比较累，还是整理了下笔记防止忘记吧！\n<!--more-->\n\n## Git设置\n\n初次安装完成后需要进行**名字**和**Email**地址设置：\n\n```\n$ git config --global user.name \"Your Name\"\n\n$ git config --global user.email \"email@example.com\"\n```\n\n## 版本库创建\n\n```\n$ git init //把当前目录变成Git可以管理的仓库\n```\n\n### 添加文件\n\n```\n$ git add <file> //添加文件到暂存区\n\n$ git add . //添加所有新文件和编辑过的文件，但不包括删除的文件\n\n$ git add -u //添加编辑或删除的文件，不包括新添加文件\n\n$ git add -A . //添加所有改变的文件\n\n$ git add -A //添加所有内容\n\n$ git commit -m \"describe\" //提交文件到仓库\n```\n\n## 版本管理\n\n```\n$ git status //查看仓库当前状态\n\n$ git diff <file> //查看文件修改内容\n```\n\n### 版本退回\n\n```\n$ git reset --hard HEAD //返回当前版本\n\n$ git reset --hard HEAD^ //返回上个版本\n\n$ git reset --hard HEAD~100 //返回上100个版本\n\n$ git reset --hard commit_id //返回对应commit_id版本\n\n$ git log //查看提交历史，以便确定要回退到哪个版本\n\n$ git reflog //关闭终端后，查看提交历史，以便确定要回退到哪个版本\n```\n\n### 撤销修改\n\n```\n$ git checkout -- file //撤销工作区的修改\n\n$ git reset HEAD file //撤销暂存区的修改,后用上面命令丢弃修改\n```\n\n### 删除文件\n\n```\n$ git rm <file> //删除一个文件，误删情况下可用 git checkout --file 恢复文件\n```\n\n## 远程仓库\n\n### 添加远程库\n\n```\n$ git remote add origin git@server-name:path/repo-name.git //关联远程库\n\n$ git push -u origin master //第一次推送master分支的所有内容\n\n$ git push origin master //之后推送master分支的最新修改\n\n$ git remote //查看远程库信息，添加 -v 显示详细信息\n```\n\n### 从远程库克隆\n\n```\n$ git clone https://github.com/yourname/repo-name.git //克隆远程库\n```\n\n## 分支管理\n\n### 创建与合并\n\n```\n$ git branch //查看分支\n\n$ git branch <name> //创建分支\n\n$ git checkout <name> //切换分支\n\n$ git checkout -b <name> //创建并切换分支\n\n$ git merge <name> //合并某分支到当前分支\n\n$ git log --graph //查看分支合并图\n\n$ git branch -d <name> //删除分支\n\n$ git branch -D <name> //强行删除\n\n$ git merge --on-ff -m \"describe\" <name> //普通模式合并，合并后历史有分支，可以使用 git log 命令查看\n```\n\n### 工作区存储\n\n当临时bug或者任务需要切换至其他分支进行工作时，可先存储当前工作现场，切换至其他分支完成工作后，返回分支恢复现场继续工作。\n\n```\n$ git stash //“储藏”当前工作现场\n\n$ git stash list //查看“储藏”的工作现场\n\n$ git stash apply //恢复，但不删除stash内容\n\n$ git stash drop //删除stash内容\n\n$ git stash pop //恢复同时删除stash内容\n```\n\n## 标签管理\n\n### 创建标签\n\n```\n$ git tag <tagname> //创建标签\n\n$ git tag <tagname> commit_id //在对应的历史提交上，创建标签\n\n$ git tag -a <tagname> -m \"describe\" commit_id //在对应的历史提交上，创建带有说明的标签\n\n$ git tag //查看所有标签\n\n$ git show <tagname> //查看标签信息\n```\n\n### 操作标签\n\n```\n$ git tag -d <tagname> //删除本地标签\n\n$ git push origin <tagname> //推送某个标签到远程库\n\n$ git push origin --tags //推送所有未推送的标签到远程库\n\n$ git push origin :refs/tags/<tagname> //删除一个远程标签，前提需要先删除本地标签\n```\n\n## 自定义Git\n\n例如：\n\n```\n$ git config --global color.ui true //使Git适当地显示不同的颜色\n```\n\n### 配置别名\n\n别名配置栗子：\n\n```\n$ git config --global alias.st status //用st替换status\n\n$ git config --global alias.co checkout\n\n$ git config --global alias.br branch\n\n$ git config --global alias.last log -1 //最后一次提交log\n\n$ git config --global alias.unstage 'reset HEAD' //把暂存区的修改撤销掉（unstage），重新放回工作区\n\n$ git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\" //格式化显示log\n```\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中：\n\n```\n$ cat .gitconfig\n[alias]\n    co = checkout\n    ci = commit\n    br = branch\n    st = status\n[user]\n    name = Your Name\n    email = your@email.com\n```\n别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。\n\n每个仓库的Git配置文件都放在`.git/config`文件中，:\n\n```\n$ cat .git/config \n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\n[remote \"origin\"]\n    url = git@github.com:yourname/repo-name.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[alias]\n    last = log -1\n```\n\n\n\n","tags":["Git","笔记"],"categories":["技术向"]},{"title":"Parker插件破解","url":"/2017/10/15/Parker插件破解.html","content":"![img0](http://oohkvf5b9.bkt.clouddn.com/A04%20Parker.jpg?imageMogr2/format/webp)\n\nParker是PS的标注插件，可以有效提高UI标注图效率，当然个人认为Markman的操作会更加的便捷快速，看个人习惯了哈。<!--more-->\n\n这里记录下`Parker`在`Windows`下`Photoshop CC2017`的破解过程。\n\n## 1、打开注册器\n\n快捷键`win+R`，运行`regedit`命令打开注册表编辑器。\n\n![image0](http://oohkvf5b9.bkt.clouddn.com/A05-image0.png)\n\n## 2、新建字符串值\n\n打开注册器后，找到路径：\n\n- CC 2015.5、CC 2017：`HKEY_CURRENT_USER/Software/Adobe/CSXS.7`\n- CC 2015：`HKEY_CURRENT_USER/Software/Adobe/CSXS.6`\n- CC、CC 2014：`HKEY_CURRENT_USER/Software/Adobe/CSXS.5`\n\n添加`字符串值`项`PlayerDebugMode`，值为`1`。\n\n![image1](http://oohkvf5b9.bkt.clouddn.com/A05-image1.gif)\n\n**注：**跳过此步骤CC系列将会提示*插件未正确签署*报错。\n\n## 3、修改试用时间\n\nWindows下进入目录`C:\\Users\\XXX（用户）\\AppData\\Roaming\\Adobe\\CEP\\extensions\\parker\\js`，打开`parker.js`文件，修改试用时间：\n\n```\n搜索：\nif(now - trial_start > 30*24*3600*1000) { // 试用期30天\n\n修改为：\nif(now -trial_start > 30*24*3600*1000*10240) { // 试用期30*10240天\n```\n\n\n\n","tags":["PS插件"],"categories":["工具资源"]},{"title":"Hexo常用命令笔记","url":"/2017/10/14/Hexo常用命令笔记.html","content":"\n\n\nHexo常用命令学习笔记♥(๑> ₃ <)♥ ~ ~\n<!--more-->\n\n## Hexo\n\n```\n$ npm install hexo -g //安装  \n$ npm update hexo -g //升级  \n$ hexo init //初始化\n```\n\n## 简写\n\n```\n$ hexo n \"我的博客\" == hexo new \"我的博客\" //新建文章\n$ hexo p == hexo publish\n$ hexo g == hexo generate //生成\n$ hexo s == hexo server //启动服务预览\n$ hexo d == hexo deploy //部署\n```\n\n## 服务器\n\n```\n$ hexo server //Hexo 会监视文件变动并自动更新，您无须重启服务器。\n$ hexo server -s //静态模式\n$ hexo server -p 5000 //更改端口\n$ hexo server -i 192.168.1.1 //自定义 IP\n\n$ hexo clean //清除缓存 网页正常情况下可以忽略此条命令\n$ hexo g //生成静态网页\n$ hexo d //开始部署\n```\n\n## 监视文件变动\n\n```\n$ hexo generate //使用 Hexo 生成静态文件快速而且简单\n$ hexo generate --watch //监视文件变动\n```\n\n## 完成后部署\n\n```\n//两个命令的作用是相同的\n$ hexo generate --deploy\n$ hexo deploy --generate\n\n//简写：\n$ hexo deploy -g\n$ hexo server -g\n```\n\n## 草稿\n\n```\n$ hexo publish [layout] <title>\n```\n\n## hexo命令模版\n\n```\neg:\n\n$ hexo new \"postName\" //新建文章\n$ hexo new page \"pageName\" //新建页面\n$ hexo generate //生成静态页面至public目录\n$ hexo server //开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n$ hexo deploy //将.deploy目录部署到GitHub\n\n$ hexo new [layout] <title>\n$ hexo new photo \"My Gallery\"\n$ hexo new \"Hello World\" --lang tw\n```\n\n## 文章模板\n\n```\n\t---\t\n\ttitle: 使用Hexo搭建个人博客\n\tlayout: post\n\tdate: 2014-03-03 19:07:43\n\tcomments: true\n\tcategories: Blog\n\ttags: [Hexo]\n\tkeywords: Hexo, Blog\n\t---\n\n\t以上是文章摘要 <!--more--> 以下是余下全文 \n```\n\n## 推送到服务器上\n\n```\n$ hexo n //写文章\n$ hexo g //生成\n$ hexo d //部署 #可与hexo g合并为 hexo d -g\n```\n\n## 报错相关\n\n### 1.找不到git部署\n\n```\n\tERROR Deployer not found: git\n```\n解决方法：\n```\n$ npm install hexo-deployer-git --save\n```\n\n### 2.xcodebuild\n\n```\nxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n```\n解决方法：\n```\n$ npm install bcrypt\n```\n\n### 3. RSS不显示\n\n安装RSS插件\n\n```\n$ npm install hexo-generator-feed --save\n```\n\n开启RSS功能，编辑`hexo/_config.yml`，添加如下代码：\n\n```\nrss: /atom.xml #rss地址  默认即可\n```\n\n","tags":["笔记","Hexo"],"categories":["技术向"]},{"title":"Sublime--快捷键","url":"/2017/05/23/Sublime-快捷键.html","content":"\nSublime常用快捷键笔记♥(๑> ₃ <)♥ ~ ~\n<!-- more -->\n\n### 通用（General）\n```\n\t↑↓←→：上下左右移动光标，注意不是不是KJHL！\n\tAlt：调出菜单\n\tCtrl + Shift + P：调出命令板（Command Palette）\n\tCtrl + `：调出控制台\n```\n### 编辑（Editing）\n```\n\tCtrl + Enter：在当前行下面新增一行然后跳至该行\n\tCtrl + Shift + Enter：在当前行上面增加一行并跳至该行\n\tCtrl + ←/→：进行逐词移动\n\tCtrl + Shift + ←/→进行逐词选择\n\tCtrl + ↑/↓移动当前显示区域\n\tCtrl + Shift + ↑/↓移动当前行\n```\n### 选择（Selecting）\n```\n\tCtrl + D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl + D选择该词出现的下一个位置，在多重选词的过程中，使用Ctrl + K进行跳过，使用Ctrl + U进行回退，使用Esc退出多重编辑\n\tCtrl + Shift + L：将当前选中区域打散\n\tCtrl + J：把当前选中区域合并为一行\n\tCtrl + M：在起始括号和结尾括号间切换\n\tCtrl + Shift + M：快速选择括号间的内容\n\tCtrl + Shift + J：快速选择同缩进的内容\n\tCtrl + Shift + Space：快速选择当前作用域（Scope）的内容\n```\n### 查找&替换（Finding&Replacing）\n```\n\tF3：跳至当前关键字下一个位置\n\tShift + F3：跳到当前关键字上一个位置\n\tAlt + F3：选中当前关键字出现的所有位置\n\tCtrl + F/H：进行标准查找/替换，之后：\n\tAlt + C：切换大小写敏感（Case-sensitive）模式\n\tAlt + W：切换整字匹配（Whole matching）模式\n\tAlt + R：切换正则匹配（Regex matching）模式\n\tCtrl + Shift + H：替换当前关键字\n\tCtrl + Alt + Enter：替换所有关键字匹配\n\tCtrl + Shift + F：多文件搜索&替换\n```\n### 跳转（Jumping）\n```\n\tCtrl + P：跳转到指定文件，输入文件名后可以：\n\t@ 符号跳转：输入@symbol跳转到symbol符号所在的位置\n\t# 关键字跳转：输入#keyword跳转到keyword所在的位置\n\t: 行号跳转：输入:12跳转到文件的第12行。\n\tCtrl + R：跳转到指定符号\n\tCtrl + G：跳转到指定行号\n```\n### 窗口（Window）\n```\n\tCtrl + Shift + N：创建一个新窗口\n\tCtrl + N：在当前窗口创建一个新标签\n\tCtrl + W：关闭当前标签，当窗口内没有标签时会关闭该窗口\n\tCtrl + Shift + T：恢复刚刚关闭的标签\n```\n### 屏幕（Screen）\n```\n\tF11：切换普通全屏\n\tShift + F11：切换无干扰全屏\n\tAlt + Shift + 2：进行左右分屏\n\tAlt + Shift + 8：进行上下分屏\n\tAlt + Shift + 5：进行上下左右分屏\n\t分屏之后，使用Ctrl + 数字键跳转到指定屏，使用Ctrl + Shift + 数字键将当前屏移动到指定屏\n```\n\n\n","tags":["笔记","Sublime"],"categories":["技术向"]},{"title":"Hexo博客搭建","url":"/2017/05/16/hexo博客搭建.html","content":"\n搭个博客给记录下生活琐事、笔记以及传说中的奋斗史。\n<!--more-->\n\n\n这里记录下搭建的过程（Windows）以及一些踩过的坑，不堪回首的血泪史啊~  (ŎдŎ；) 。\n\n\n## 1.安装Git\n\n点击[Git-Downloads](https://git-scm.com/downloads)下载，安装过程一路next，搭建过程中只是为了使用**Git指令**比较简单，Git作为目前最受欢迎的开源分布式版本控制系统，有兴趣的童鞋可以瞅瞅更具体的教程哈，附上链接[廖雪峰Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)and[Gitbook](https://git-scm.com/book/zh/v2)。\n\n## 2.安装nodejs\n\n在[nodejs官网](https://nodejs.org/en/)上，下载安装包，安装路径自定义，其他一路next。Windows上安装nodejs后自带npm（node包管理和分发工具），Linux上需独立安装npm。\n\n<br/>\n安装完成后使用以下命令查看nodejs和npm版本：\n\n```\n$ node -v\n$ npm -v\n```\n### 这里贴上npm常用命令：<br/>\n\n```\n$ npm install <name> [-g] [--save-dev] // 安装插件\n\n$ npm uninstall <name> [-g] [--save-dev] // 卸载插件\n\n$ npm update <name> [-g] [--save-dev] // 更新插件\n\n$ npm update [--save-dev] // 更新全部插件\n\n$ npm help // 查看npm帮助\n\n$ npm list // 查看当前目录已安装插件\n\n```\n* name : node插件名称；\n* -g : 全局安装，并写入系统环境变量；\n* --save : 保存配置信息至package.json；\n* -div : 保存至package.json的devDependencies节点；\n\n### npm更换淘宝镜像源\n这里有四种方法，window上推荐使用1和3，方法4需要看网络有时候会加载失败。\n1. 通过config命令\n```\n$ npm config set registry http://registry.npm.taobao.org \n$ npm info underscore //如果上面配置正确这个命令会有字符串response\n```\n2. 命令行指定\n```\n$ npm --registry https://registry.npm.taobao.org info underscore \n```\n3. 编辑 ~/.npmrc 文件增加\n```\n$ registry = https://registry.npm.taobao.org\n```\n4. 安装cnpm\n```\n$ npm install cnpm -g --registry=https://registry.npm.taobao.org //安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误\n```\n以上命令都是在**命令行**或**Git Bash终端窗口**上执行。\n\n## 3. 安装及配置Hexo\n\n英文较好的可以查看[Hexo官网](https://hexo.io/)的[官方文档](https://hexo.io/docs/)。\n\n### 下载安装Hexo\n\n这里使用Windows的童鞋需要注意下官网安装Hexo的指令是`npm install hexo-cli -g`，但是安装完成后有些童鞋会发现使用hexo命令提示不是内部命令，这里推荐使用以下指令进行安装（不要问我为什么我也不知道试了n多回才发现的 o(╥﹏╥)o）：\n```\n$ npm install -g hexo\n```\n\n### 初始化\n```\n$ hexo init yourblog // 建立并初始化博客文件夹\n\n$ cd yourblog // 进入博客文件夹\n\n$ npm install // 安装依赖包\n\n$ hexo generate //或者hexo g ，生成静态文件会在当前目录下生成一个新的叫做public的文件夹\n\n$ hexo server //或者hexo s ，启动本地web服务，可以在http://localhost:4000/ 查看\n```\n初始化完成后目录为（PS：不一定一模一样哈）：\n```\n.\n├── _config.yml //网站的 配置 信息，可以在此配置大部分的参数。\n├── package.json\n├── public\n├── scaffolds     //模版 文件夹。新建文章时，Hexo 会根据 scaffold 来建立文件。\n├── source     //资源文件夹是存放用户资源的地方。\n|   ├── _drafts //草稿\n|   └── _posts //文章\n└── themes     //主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n那么现在打开浏览器输入`localhost:4000`看看博客界面吧。\n\n### Hexo常用命令\n```\n$ hexo g == hexo generate //生成静态文件\n\n$ hexo s == hexo server //启动本地Web服务，用于预览\n\n$ hexo d == hexo deploy //前提需要修改站点配置文件部署部分详情可查看配置博客，部署到远端平台（GitHub/coding等平台）\n\n$ hexo new \"postName\"  //新建文章\n\n$ hexo new page \"pageName\"  //新建页面\n```\n注意：每次预览`hexo s`或部署`hexo d`前需要使用`hexo g`渲染生成静态文件后再执行。\n\n### 配置博客\n在博客文件夹根目录下找到**站点配置文件**`_config.yml`,以下是我的配置文件内容及配置说明：\n```\n# Hexo Configuration Hexo配置文件\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n\n# 网站信息\n#标题\ntitle: 那年四月\n#副标题\nsubtitle: 小桥 · 流水 · 人家\n#网站描述\ndescription: 吃饭睡觉打豆豆(づ｡◕‿‿◕｡)づ\n#作者昵称\nauthor: 吃兔子的小萝卜\n#网站语言，设置简体汉语\nlanguage: zh-Hans\n\n#时区，默认电脑时区\n#timezone: \ntimezone: Asia/Shanghai\n\n# 网址设置\n#如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n#网址\nurl: http://wangyiting.win\n#网站根目录。如果网站是放在子目录中，将root设置成'子目录名'\nroot: /\n#文章链接地址格式 。即文章存放的目录。\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# 目录设置\n#资源文件夹，放在里面的文件会上传到github中\nsource_dir: source\n#公共文件夹，存放生成的静态文件\npublic_dir: public\n#标签文件夹，默认是tags。实际存放在source/tags中。\ntag_dir: tags\n#rss_dir: rss\n#档案文件夹，默认是archives。\narchive_dir: archives\n#分类文件夹，默认是categories。实际存放在source/categories中。\ncategory_dir: categories\n#代码文件夹，默认是downloads/code\ncode_dir: downloads/code\n#国际化文件夹，默认跟language相同\ni18n_dir: :lang\n#不需要渲染的文件夹或文件夹,放在[]中\n# 例如百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过\nskip_render: \n\n# 写作文章选项\n# 新建博文（帖子）的默认名称\n# File name of new posts\nnew_post_name: :title.md \n#默认布局模板是post，而不是draft和page\ndefault_layout: post\n#是否将标题转换成标题形式（首字母大写）\ntitlecase: false # Transform title into titlecase\n#在新标签页面中打开网页\nexternal_link: true # Open external links in new tab\nfilename_case: 0\n#是否渲染草稿\nrender_drafts: false\n#启动 Asset 文件夹\npost_asset_folder: false\n#把链接改为与根目录的相对位址\nrelative_link: false\n#显示未来的文章\nfuture: true\n#代码块的设置\nhighlight:\n  enable: true # 使用代码高亮\n  line_number: true # 显示行号\n  auto_detect: true  # 自动检测语言\n  tab_replace:\n\n\n# 分类和标签\n# 默认分类\ndefault_category: uncategorized\n#分类别名\ncategory_map:\n#标签别名\ntag_map:\n\n\n# 日期和时间格式\n#Hexo 使用 Moment.js 来解析和显示时间。\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n\n# 分页配置\n#每页显示的文章量 \nper_page: 8\n#分页路径，在public中可以看到\n#pagination_dir: page\n\n\n# Extensions 拓展插件配置\n## Plugins: https://hexo.io/plugins/\nplugins: \nbaidusitemap: \n  path: baidusitemap.xml\n\n#search 站内搜索\n# 需要安装插件：\n# npm install hexo-generator-search --save\n# npm install hexo-generator-searchdb --save\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n\n\n# 主题配置\n## Themes: https://hexo.io/themes/\n#theme: false #禁用主题\n#theme: landscape\ntheme: next\n\n\n# Deployment  部署配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    # 部署到github，取消注释，可同时部署\n    # github: git@github.com:erbiduo/wyt.github.io.git,master\n    # 部署到coding.net\n    coding: git@git.coding.net:erduo/blog.git,master\n```\n注意：其中`theme`主题配置默认为`landscape`，本站为`next`。\n\n## 4. next主题下载&配置\n\n满血复活 go on !!! ┗( ▔, ▔ )┛ 很好下一步美化下博客，想要查看详细的修改配置，可以参考[NexT官方文档](http://theme-next.iissnan.com/getting-started.html)，是中文版哦。<br/>\n\n### 下载next主题\n定位到Hexo站点目录（如e:hexo\\yourblog\\）下，使用git指令下载主题文件：\n```\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n### 启用主题\n在博客文件夹根目录下找到**站点配置文件**`_config.yml`，修改如下：\n```\n# 主题配置\n## Themes: https://hexo.io/themes/\n#theme: false #禁用主题\n#theme: landscape\ntheme: next\n```\n### 配置主题\n在next主题文件夹`yourblog\\themes\\next`下，找到**主题配置文件**`_config.yml`，进行配置信息修改，以下为主题修改部分内容：\n\n1. 主题样式选择\nnext有三种主题可供选择，修改next主题下`_config.yml`的`scheme`字段：\n```\n# Schemes 样式选择\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n```\n\n2. 菜单设置\n修改next主题下`_config.yml`的`menu`字段:\n```\nmenu: #菜单设置\n  home: /  #主页\n  categories: /categories  #分类页\n  archives: /archives  #归档页\n  tags: /tags  #标签页\n  about: /about  #关于页面\n  #sitemap: /sitemap.xml #站点地图\n  #commonweal: /404.html  #404页面\n```\n\n3. 头像设置\n修改next主题下`_config.yml`的`avatar`字段:\n```\navatar: http://img.hb.aicdn.com/4bb35e890d55e0ad33d33f01af51ee498440c11a6c3d7-3qnhjf_fw658\n```\n\t链接是头像图片链接可以自己修改。\n\n4. 文章代码主题设置\nNext主题总共支持5种主题，默认主题是白色的`normal`。可以通过修改next主题下的`_config.yml`的`highlight`字段，来设置代码主题。\n```\nhighlight_theme: normal\n```\n\n5. 社交链接设置\n修改next主题下`_config.yml`的`social`字段:\n```\nsocial:\n  #LinkLabel: Link\n  #GitHub: \n  #Twitter: \n  Weibo:  http://weibo.com/\n```\n\t链接同上自行修改。\n\n6. 首页文章摘要设置\nnext默认首页文章显示所有内容，想要只显示摘要，修改next主题下`_config.yml`的`auto_excerpt`字段:\n```\nauto_excerpt:\n  enable: true #启用\n  length: 150 #显示摘要字数\n```\n\n7. 添加菜单页面\n做完上一步会发现在首页点击菜单上的分类、归档等页面都会报错，提示没有该页面，所以需要添加各个菜单页面，定位到站点文件夹，在终端中执行新建页面指令：\n```\n$ hexo new page tags //添加标签页面\n\n$ hexo new page categories //添加分类页面\n\n$ hexo new page about  //添加关于我页面\n```\n\t输入命令后会在`yourblog/source`下生成对应文件夹，可以进入对应文件夹修改`.md`文件\n\n## 5. 添加站内搜索\n\n### 安装插件\n安装`hexo-generator-search`和`hexo-generator-searchdb`,在站点的根目录下执行命令：\n```\n$ npm install hexo-generator-search --save\n\n$ npm install hexo-generator-searchdb --save\n```\n\n### 启用搜索\n编辑根目录下**站点配置文件**`_config.yml`，新增以下内容到任意位置：\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n下一步修改next主题下`_config.yml`的`local_search`字段:\n```\n# Local search\nlocal_search:\n  enable: true\n```\n\n## 6. 添加文章阅读数统计\n阅读数统计采用[Leancloud](https://leancloud.cn/)，没有账号的童鞋可以注册一个。\n### 新建应用\n\n填写应用名后点击创建。\n\n### 创建Class\n在左侧菜单存储中创建一个Class命名为`Counter`。\n\n\n### Key配置\n将设置中应用Key复制。\n\n\n对应修改next主题下`_config.yml`的`leancloud_visitors`字段:\n```\nleancloud_visitors:\n  enable: true\n  app_id:   #<app_id>\n  app_key:   #<app_key>\n```\n\n### 添加 lean-analytics.swig 文件\n在主题的`layout\\_scripts`路径下，新建一个 lean-analytics.swig 文件，并向里面添加以下内容：\n```\n<!-- custom analytics part create by xiamo -->\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"{{theme.leancloud_visitors.app_id}}\", \"{{theme.leancloud_visitors.app_key}}\");</script>\n<script>\nfunction showTime(Counter) {\n\tvar query = new AV.Query(Counter);\n\t$(\".leancloud_visitors\").each(function() {\n\t\tvar url = $(this).attr(\"id\").trim();\n\t\tquery.equalTo(\"url\", url);\n\t\tquery.find({\n\t\t\tsuccess: function(results) {\n\t\t\t\tif (results.length == 0) {\n\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': 0';\n\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < results.length; i++) {\n\t\t\t\t\tvar object = results[i];\n\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + object.get('time');\n\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(object, error) {\n\t\t\t\tconsole.log(\"Error: \" + error.code + \" \" + error.message);\n\t\t\t}\n\t\t});\n\n\t});\n}\n\nfunction addCount(Counter) {\n\tvar Counter = AV.Object.extend(\"Counter\");\n\turl = $(\".leancloud_visitors\").attr('id').trim();\n\ttitle = $(\".leancloud_visitors\").attr('data-flag-title').trim();\n\tvar query = new AV.Query(Counter);\n\tquery.equalTo(\"url\", url);\n\tquery.find({\n\t\tsuccess: function(results) {\n\t\t\tif (results.length > 0) {\n\t\t\t\tvar counter = results[0];\n\t\t\t\tcounter.fetchWhenSave(true);\n\t\t\t\tcounter.increment(\"time\");\n\t\t\t\tcounter.save(null, {\n\t\t\t\t\tsuccess: function(counter) {\n\t\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + counter.get('time');\n\t\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\t},\n\t\t\t\t\terror: function(counter, error) {\n\t\t\t\t\t\tconsole.log('Failed to save Visitor num, with error message: ' + error.message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar newcounter = new Counter();\n\t\t\t\tnewcounter.set(\"title\", title);\n\t\t\t\tnewcounter.set(\"url\", url);\n\t\t\t\tnewcounter.set(\"time\", 1);\n\t\t\t\tnewcounter.save(null, {\n\t\t\t\t\tsuccess: function(newcounter) {\n\t\t\t\t\t    console.log(\"newcounter.get('time')=\"+newcounter.get('time'));\n\t\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + newcounter.get('time');\n\t\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\t},\n\t\t\t\t\terror: function(newcounter, error) {\n\t\t\t\t\t\tconsole.log('Failed to create');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\terror: function(error) {\n\t\t\tconsole.log('Error:' + error.code + \" \" + error.message);\n\t\t}\n\t});\n}\n$(function() {\n\tvar Counter = AV.Object.extend(\"Counter\");\n\tif ($('.leancloud_visitors').length == 1) {\n\t\taddCount(Counter);\n\t} else if ($('.post-title-link').length > 1) {\n\t\tshowTime(Counter);\n\t}\n}); \n</script>\n```\n完成后开启预览见证一下奇迹吧。\n\n## 7.部署上线\n博客可以同时部署在**[Github](https://github.com/)**和**[Coding](https://coding.net/)**上，添加**SSH Key**和**项目创建**操作其实差不多，木有账号的童鞋可以去各自官网注册一个，这里就以Github为例。\n\n### 创建SSH Key\n打开`Git Bash`，输入命令：\n```\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n邮件换成自己注册的邮件地址。完成后查看用户主目录下`.ssh`文件夹，目录下会有`id_rsa`和`id_rsa.pub`这两个文件，这两个就是SSH Key的秘钥对,id_rsa是私钥，id_rsa.pub是公钥。\n\n### 添加SSH Key\n登陆GitHub，点击头像打开`Account settings`，`SSH Keys`页面，然后，点`Add SSH Key`，填上任意`Title`，在`Key`文本框里粘贴`id_rsa.pub`文件的内容：\n\n### 创建项目\n创建项目，输入项目名称`myblog`，选择公开`Public`。\n\n### 设置pages服务\n项目创建成功后，选择`Setting`下拉至`Github Pages`设置页面展示分支为`master branch`并保存。\n注意：**站点配置文件**`_config.yml`中，网址设置：\n```\nurl: https://erbiduo.github.io/\nroot: //myblog\n```\n* `url`为pages服务的页面网址`https://erbiduo.github.io/`。\n* `root`需要改为项目名称即子目录名`/myblog`而不是`/`。\n\n否则会出现加载页面之后没有样式的情况。自定义域名时修改回来即可。<br/>\n\n### 配置deploy部署\n修改站点目录下`_config.yml`的`deploy`字段，输入对应项目地址及分支:\n```\ndeploy:\n  type: git\n  repo:\n    # 部署到github\n    # github: git@github.com:erbiduo/xxx.github.io.git,master\n    # 部署到coding.net。取消注释，可同时部署\n    coding: git@git.coding.net:erduo/blog.git,master\n```\n\n### 部署\n定位到博客文件目录下执行命令：\n```\n$ git init //初始化本地仓库\n\n$ hexo g  //生成静态页面\n\n$ hexo s //预览\n\n$ hexo d //部署\n```\nOK 至此全部搞定，个性化修改的话可以参考next主题[官方文档](http://theme-next.iissnan.com/getting-started.html)。\n\n<!-- ![1](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1492357442325&di=416982fa22136fd517c1174baea0a114&imgtype=0&src=http%3A%2F%2Fi2.qhimg.com%2Ft0176245da8cf4fd621.jpg?imageMogr2/format/webp) -->","tags":["Hexo","博客"],"categories":["技术向"]}]